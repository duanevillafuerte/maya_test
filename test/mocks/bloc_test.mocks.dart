// Mocks generated by Mockito 5.4.6 from annotations
// in myapp/test/mocks/bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter/material.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:myapp/blocs/app_bloc.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeValueNotifier_0<T> extends _i1.SmartFake
    implements _i2.ValueNotifier<T> {
  _FakeValueNotifier_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AppBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppBloc extends _i1.Mock implements _i3.AppBloc {
  MockAppBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ValueNotifier<num> get balance =>
      (super.noSuchMethod(
            Invocation.getter(#balance),
            returnValue: _FakeValueNotifier_0<num>(
              this,
              Invocation.getter(#balance),
            ),
          )
          as _i2.ValueNotifier<num>);

  @override
  void login({
    required _i2.BuildContext? context,
    required String? username,
    required String? password,
    _i4.StreamController<int>? controller,
  }) => super.noSuchMethod(
    Invocation.method(#login, [], {
      #context: context,
      #username: username,
      #password: password,
      #controller: controller,
    }),
    returnValueForMissingStub: null,
  );

  @override
  void logout({required _i2.BuildContext? context}) => super.noSuchMethod(
    Invocation.method(#logout, [], {#context: context}),
    returnValueForMissingStub: null,
  );

  @override
  void sendMoney({required _i2.BuildContext? context}) => super.noSuchMethod(
    Invocation.method(#sendMoney, [], {#context: context}),
    returnValueForMissingStub: null,
  );

  @override
  void viewTransactions({required _i2.BuildContext? context}) =>
      super.noSuchMethod(
        Invocation.method(#viewTransactions, [], {#context: context}),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> submit({
    required _i2.BuildContext? context,
    required num? amount,
    _i4.StreamController<int>? controller,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#submit, [], {
              #context: context,
              #amount: amount,
              #controller: controller,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> getTransactions({
    required _i2.BuildContext? context,
    required _i4.StreamController<dynamic>? controller,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getTransactions, [], {
              #context: context,
              #controller: controller,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  dynamic showBottomSheet({
    required _i2.BuildContext? context,
    required String? message,
  }) => super.noSuchMethod(
    Invocation.method(#showBottomSheet, [], {
      #context: context,
      #message: message,
    }),
  );
}
